{% extends 'base.html.twig' %}

{% block title %}Redovisningar{% endblock %}

{% block body %}
        <div class="two-col-layout">
            <div class="aside">
                <h2>Länk</h2>
                <ul>
                    <li><a href="#kmom01">Kmom01</a></li>
                    <li><a href="#kmom02">Kmom02</a></li>
                    <li><a href="#kmom03">Kmom03</a></li>
                </ul>
            </div>

            <div class="main">
                <h1>Redovisningar</h1>
                <div id="kmom01">
                    <h2>Kmom01</h2>
                    <p><strong>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering:</strong><br>
                    Jag har grundkunskaper i objektorientering från min pågående kurs i OOP med Python. Jag håller fortfarande på att lära mig grunderna och har inte gjort klart kursen än. Begrepp som klasser, objekt och metoder börjar bli mer bekanta, men jag tycker det kan vara ganska svårt att förstå hur allt hänger ihop – särskilt när det blir mycket nytt på en gång.</p>

                    <p><strong>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</strong><br>
                    Klasser i PHP fungerar som mallar för att skapa objekt. Man använder class och new för att skapa ett objekt. Inuti klassen kan man ha properties (variabler) och metoder (funktioner). Något som var nytt för mig var att PHP har en inbyggd klass som heter stdClass, där man kan skapa ett objekt direkt utan att behöva skriva en egen klass. </p>

                    <p><strong>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</strong><br>
                    Till en början kändes strukturen ganska överväldigande. Det var mycket nya filer, mappar och begrepp att sätta sig in i. Jag försökte förstå vad som var vad och hur allt hängde ihop, och även om det fortfarande känns lite rörigt ibland, börjar jag få en bättre bild av hur allt fungerar.</p>

                    <p><strong>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla:</strong><br>
                    Artikeln innehåller mycket att ta in som nybörjare. En del jag fastnade för var delen om databaser, eftersom jag är intresserad av att lära mig mer om hur man jobbar med databaser i PHP. Det var intressant att läsa om PDO, och hur man kan använda det för att skydda sig mot SQL-injection. </p>

                    <p><strong>TIL:</strong><br>
                    Idag har jag lärt mig mer om objektorienterad programmering i PHP. Jag lärde mig också om stdClass, som är en enkel, inbyggd klass i PHP som man kan använda för att snabbt skapa objekt när man inte behöver en fullständig klass. Jag har även börjat jobba med Symfony och lärt mig hur man skapar en kontroller för att bygga API:er. </p>

                </div>

                <div id="kmom02">
                    <h2>Kmom02</h2>
                    <p><strong>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP:</strong><br>
                    <p>Arv betyder att en klass kan "ärva" kod från en annan klass. Det betyder att den nya klassen får egenskaper och metoder från den andra klassen, men kan också lägga till nya.<br>
                    Komposition betyder att en klass innehåller en annan klass som en del av sig själv. Det är som att skapa ett objekt inuti ett annat objekt.<br>
                    Ett interface är som ett kontrakt eller en mall för vilka metoder en klass måste ha. Det innehåller bara metodnamn, men ingen kod i sig.<br>
                    Traits är små kodbitar med funktioner som man kan "klistra in" i olika klasser med hjälp av use, ett enkelt sätt att dela kod mellan klasser.</p>

                    <p><strong>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</strong><br>
                    <p>Jag använde övningskoden som hjälp, men det var ändå svårt att förstå hur allt skulle kopplas ihop. Jag satt i flera dagar och testade, flyttade runt kod och försökte få det att fungera. Jag skapade funktioner för att blanda kort, dra kort och visa kortleken. Det tog tid att förstå hur sessionen fungerar och hur man sparar kortleken mellan olika anrop.</p>
                    <p>Efter att ha fått lite hjälp hemma hos mina föräldrar så kunde jag till slut lösa det. Koden fungerar nu men det finns säkert mycket som går att göra bättre. Just nu ligger jag efter i andra kurser, så jag låter det vara så länge det fungerar.</p>

                    <p><strong>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</strong><br>
                    <p>Symfony med applikationskod enligt MVC är helt nytt för mig och ganska svårt att komma in i. Det är mycket att hålla koll på så som routes, controllers och templates. Eftersom jag ligger efter i flera kurser just nu, har jag inte riktigt tid att fördjupa mig, och det gör det ännu svårare att förstå hur allt hänger ihop.</p>
                    <p>Jag kan se att det är en bra struktur, och att det nog blir lättare när man väl förstår det. Men just nu har jag svårt att veta vad som ska skrivas vart och hur man ska skriva det. Jag tror att det kommer ta tid innan jag känner mig trygg med Symfony. Men jag försöker ta det steg för steg och göra så gott jag kan.</p>
                        
                    <p><strong>Vilken är din TIL för detta kmom?</strong><br>
                    <p>Något nytt jag upptäckte var PHP-metoden shuffle(), som hjälpte mig i den här uppgiften. Jag använde den för att blanda min kortlek. Jag har också lärt mig hur man använder sessioner i Symfony. Man kan spara och läsa data med $session->set() och $session->get().</p>
                </div>

                <div id="kmom03">
                    <h2>Kmom03</h2>
                    <p>Kommer fyllas på med tid..</p>
                </div>
            </div>
        </div>
{% endblock %}